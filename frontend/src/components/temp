import React, { useEffect, useState } from "react";
import AddFoodModal from "./AddFoodModal";
import "./static/css/meal-plan.css";
import { BackendUrl } from "../constants";

import upArrow from "./static/images/arrowpointingup.png";
import downArrow from "./static/images/arrowpointingdown.png";

const MealPlan = () => {
    const [mealPlan, setMealPlan] = useState({ days: [], mealTimes: [] });
    const [selectedCell, setSelectedCell] = useState({ day: {}, meal: {}, mealtime: {} });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [savedFoods, setSavedFoods] = useState([]);

    useEffect(() => {
        fetch(`${BackendUrl}/api/meal-plan`)
            .then(response => response.json())
            .then(data => {
                console.log("Fetched meal plan data:", data);
                setMealPlan(data || { days: [], mealTimes: [] });
            })
            .catch(error => console.error("Error fetching meal plan:", error));
    }, []);

    const handleReorder = (index1, index2) => {
        if (index1 < 0 || index2 < 0 || index1 >= mealPlan.mealTimes.length || index2 >= mealPlan.mealTimes.length) {
            return;
        }

        const mealTime1 = mealPlan.mealTimes[index1];
        const mealTime2 = mealPlan.mealTimes[index2];

        fetch(`${BackendUrl}/api/mealtimes/reorder`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ mealTimeId1: mealTime1.id, mealTimeId2: mealTime2.id })
        })
            .then(response => {
                if (response.ok) {
                    const updatedMealTimes = [...mealPlan.mealTimes];
                    [updatedMealTimes[index1], updatedMealTimes[index2]] = [updatedMealTimes[index2], updatedMealTimes[index1]];
                    setMealPlan({ ...mealPlan, mealTimes: updatedMealTimes });
                }
            })
            .catch(error => console.error("Error reordering meal times:", error));
    };

    return (
        <div className="app-container">
            <h1 className="meal-plan-title">Meal Plan</h1>
            <div className="meal-plan-table-wrapper">
                <div className="meal-plan-container">
                    <table className="meal-plan-table">
                        <thead>
                            <tr>
                                <th>Meal Time</th>
                                {mealPlan.days?.map((day, index) => (
                                    <th key={index}>{day.name}</th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {mealPlan.mealTimes?.map((mt, index) => (
                                <tr key={mt.id}>
                                    <td className="meal-name-cell">
                                        <div className="meal-time-container">
                                            <span className="meal-time-name">{mt.name}</span>
                                            <div className="arrow-buttons">
                                                {index > 0 && (
                                                    <img src={upArrow} alt="Move up" className="arrow-button" onClick={() => handleReorder(index, index - 1)} />
                                                )}
                                                {index < mealPlan.mealTimes.length - 1 && (
                                                    <img src={downArrow} alt="Move down" className="arrow-button" onClick={() => handleReorder(index, index + 1)} />
                                                )}
                                            </div>
                                        </div>
                                    </td>
                                    {mealPlan.days.map((day, idx) => {
                                        const mealForDay = day.meals.find(m => m.name === mt.name);
                                        return (
                                            <td key={idx} className="food-item" onClick={() => setSelectedCell({ day, meal: mealForDay, mealtime: mt })}>
                                                <button>{mealForDay?.foods[0]?.name || ""}</button>
                                            </td>
                                        );
                                    })}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
            <AddFoodModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} savedFoods={savedFoods} />
        </div>
    );
};

export default MealPlan;
